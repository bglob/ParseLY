# Generated from .\PythonProject.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,216,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,3,23,130,8,23,1,23,4,23,133,8,23,11,
        23,12,23,134,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,150,8,25,1,26,1,26,3,26,154,8,26,1,27,1,27,1,27,
        1,27,5,27,160,8,27,10,27,12,27,163,9,27,1,27,1,27,1,27,1,27,1,27,
        5,27,170,8,27,10,27,12,27,173,9,27,1,27,3,27,176,8,27,1,28,1,28,
        1,28,1,28,1,29,1,29,1,29,1,29,1,29,4,29,187,8,29,11,29,12,29,188,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,5,32,202,
        8,32,10,32,12,32,205,9,32,1,33,4,33,208,8,33,11,33,12,33,209,1,34,
        4,34,213,8,34,11,34,12,34,214,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,0,41,0,43,0,45,0,47,20,49,21,51,22,53,23,55,24,57,25,59,
        26,61,27,63,28,65,29,67,30,69,31,1,0,6,1,0,97,122,1,0,65,90,1,0,
        48,57,1,0,9,9,1,0,32,32,2,0,10,10,13,13,228,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,
        0,3,73,1,0,0,0,5,75,1,0,0,0,7,77,1,0,0,0,9,79,1,0,0,0,11,81,1,0,
        0,0,13,83,1,0,0,0,15,86,1,0,0,0,17,89,1,0,0,0,19,92,1,0,0,0,21,95,
        1,0,0,0,23,97,1,0,0,0,25,99,1,0,0,0,27,102,1,0,0,0,29,104,1,0,0,
        0,31,107,1,0,0,0,33,110,1,0,0,0,35,113,1,0,0,0,37,117,1,0,0,0,39,
        120,1,0,0,0,41,122,1,0,0,0,43,124,1,0,0,0,45,126,1,0,0,0,47,129,
        1,0,0,0,49,136,1,0,0,0,51,149,1,0,0,0,53,153,1,0,0,0,55,175,1,0,
        0,0,57,177,1,0,0,0,59,186,1,0,0,0,61,190,1,0,0,0,63,193,1,0,0,0,
        65,198,1,0,0,0,67,207,1,0,0,0,69,212,1,0,0,0,71,72,5,43,0,0,72,2,
        1,0,0,0,73,74,5,45,0,0,74,4,1,0,0,0,75,76,5,42,0,0,76,6,1,0,0,0,
        77,78,5,47,0,0,78,8,1,0,0,0,79,80,5,37,0,0,80,10,1,0,0,0,81,82,5,
        61,0,0,82,12,1,0,0,0,83,84,5,43,0,0,84,85,5,61,0,0,85,14,1,0,0,0,
        86,87,5,45,0,0,87,88,5,61,0,0,88,16,1,0,0,0,89,90,5,42,0,0,90,91,
        5,61,0,0,91,18,1,0,0,0,92,93,5,47,0,0,93,94,5,61,0,0,94,20,1,0,0,
        0,95,96,5,58,0,0,96,22,1,0,0,0,97,98,5,60,0,0,98,24,1,0,0,0,99,100,
        5,60,0,0,100,101,5,61,0,0,101,26,1,0,0,0,102,103,5,62,0,0,103,28,
        1,0,0,0,104,105,5,62,0,0,105,106,5,61,0,0,106,30,1,0,0,0,107,108,
        5,61,0,0,108,109,5,61,0,0,109,32,1,0,0,0,110,111,5,33,0,0,111,112,
        5,61,0,0,112,34,1,0,0,0,113,114,5,97,0,0,114,115,5,110,0,0,115,116,
        5,100,0,0,116,36,1,0,0,0,117,118,5,111,0,0,118,119,5,114,0,0,119,
        38,1,0,0,0,120,121,7,0,0,0,121,40,1,0,0,0,122,123,7,1,0,0,123,42,
        1,0,0,0,124,125,7,2,0,0,125,44,1,0,0,0,126,127,5,45,0,0,127,46,1,
        0,0,0,128,130,3,45,22,0,129,128,1,0,0,0,129,130,1,0,0,0,130,132,
        1,0,0,0,131,133,3,43,21,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,
        1,0,0,0,134,135,1,0,0,0,135,48,1,0,0,0,136,137,3,47,23,0,137,138,
        5,46,0,0,138,139,3,47,23,0,139,50,1,0,0,0,140,141,5,84,0,0,141,142,
        5,114,0,0,142,143,5,117,0,0,143,150,5,101,0,0,144,145,5,70,0,0,145,
        146,5,97,0,0,146,147,5,108,0,0,147,148,5,115,0,0,148,150,5,101,0,
        0,149,140,1,0,0,0,149,144,1,0,0,0,150,52,1,0,0,0,151,154,3,39,19,
        0,152,154,3,41,20,0,153,151,1,0,0,0,153,152,1,0,0,0,154,54,1,0,0,
        0,155,161,5,34,0,0,156,160,3,53,26,0,157,160,3,47,23,0,158,160,3,
        67,33,0,159,156,1,0,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,163,
        1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,0,0,0,163,161,
        1,0,0,0,164,176,5,34,0,0,165,171,5,39,0,0,166,170,3,53,26,0,167,
        170,3,47,23,0,168,170,3,67,33,0,169,166,1,0,0,0,169,167,1,0,0,0,
        169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,
        172,174,1,0,0,0,173,171,1,0,0,0,174,176,5,39,0,0,175,155,1,0,0,0,
        175,165,1,0,0,0,176,56,1,0,0,0,177,178,5,110,0,0,178,179,5,111,0,
        0,179,180,5,116,0,0,180,58,1,0,0,0,181,187,7,3,0,0,182,183,5,32,
        0,0,183,184,5,32,0,0,184,185,5,32,0,0,185,187,5,32,0,0,186,181,1,
        0,0,0,186,182,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,
        0,0,0,189,60,1,0,0,0,190,191,5,105,0,0,191,192,5,102,0,0,192,62,
        1,0,0,0,193,194,5,101,0,0,194,195,5,108,0,0,195,196,5,115,0,0,196,
        197,5,101,0,0,197,64,1,0,0,0,198,203,3,53,26,0,199,202,3,53,26,0,
        200,202,3,47,23,0,201,199,1,0,0,0,201,200,1,0,0,0,202,205,1,0,0,
        0,203,201,1,0,0,0,203,204,1,0,0,0,204,66,1,0,0,0,205,203,1,0,0,0,
        206,208,7,4,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,
        209,210,1,0,0,0,210,68,1,0,0,0,211,213,7,5,0,0,212,211,1,0,0,0,213,
        214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,70,1,0,0,0,16,0,
        129,134,149,153,159,161,169,171,175,186,188,201,203,209,214,0
    ]

class PythonProjectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    NUMBER = 20
    DECIMAL = 21
    BOOL = 22
    LETTER = 23
    STRING = 24
    NOT = 25
    TAB = 26
    IF = 27
    ELSE = 28
    VARNAME = 29
    WS = 30
    NEWLINE = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'-='", "'*='", 
            "'/='", "':'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
            "'and'", "'or'", "'not'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "DECIMAL", "BOOL", "LETTER", "STRING", "NOT", "TAB", 
            "IF", "ELSE", "VARNAME", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "LOWER", 
                  "UPPER", "DIGIT", "NEGATIVE", "NUMBER", "DECIMAL", "BOOL", 
                  "LETTER", "STRING", "NOT", "TAB", "IF", "ELSE", "VARNAME", 
                  "WS", "NEWLINE" ]

    grammarFileName = "PythonProject.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


