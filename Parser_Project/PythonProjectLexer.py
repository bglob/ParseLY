# Generated from PythonProject.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,144,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,79,8,14,1,14,4,14,82,8,14,
        11,14,12,14,83,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,3,16,99,8,16,1,17,1,17,3,17,103,8,17,1,18,1,18,1,
        18,1,18,5,18,109,8,18,10,18,12,18,112,9,18,1,18,1,18,1,18,1,18,1,
        18,5,18,119,8,18,10,18,12,18,122,9,18,1,18,3,18,125,8,18,1,19,1,
        19,1,19,5,19,130,8,19,10,19,12,19,133,9,19,1,20,4,20,136,8,20,11,
        20,12,20,137,1,21,4,21,141,8,21,11,21,12,21,142,0,0,22,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,0,23,0,25,0,27,0,29,11,31,
        12,33,13,35,14,37,15,39,16,41,17,43,18,1,0,5,1,0,97,122,1,0,65,90,
        1,0,48,57,1,0,32,32,2,0,10,10,13,13,154,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,
        53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,60,1,0,0,0,17,63,1,0,0,
        0,19,66,1,0,0,0,21,69,1,0,0,0,23,71,1,0,0,0,25,73,1,0,0,0,27,75,
        1,0,0,0,29,78,1,0,0,0,31,85,1,0,0,0,33,98,1,0,0,0,35,102,1,0,0,0,
        37,124,1,0,0,0,39,126,1,0,0,0,41,135,1,0,0,0,43,140,1,0,0,0,45,46,
        5,43,0,0,46,2,1,0,0,0,47,48,5,45,0,0,48,4,1,0,0,0,49,50,5,42,0,0,
        50,6,1,0,0,0,51,52,5,47,0,0,52,8,1,0,0,0,53,54,5,37,0,0,54,10,1,
        0,0,0,55,56,5,61,0,0,56,12,1,0,0,0,57,58,5,43,0,0,58,59,5,61,0,0,
        59,14,1,0,0,0,60,61,5,45,0,0,61,62,5,61,0,0,62,16,1,0,0,0,63,64,
        5,42,0,0,64,65,5,61,0,0,65,18,1,0,0,0,66,67,5,47,0,0,67,68,5,61,
        0,0,68,20,1,0,0,0,69,70,7,0,0,0,70,22,1,0,0,0,71,72,7,1,0,0,72,24,
        1,0,0,0,73,74,7,2,0,0,74,26,1,0,0,0,75,76,5,45,0,0,76,28,1,0,0,0,
        77,79,3,27,13,0,78,77,1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,82,
        3,25,12,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,
        0,84,30,1,0,0,0,85,86,3,29,14,0,86,87,5,46,0,0,87,88,3,29,14,0,88,
        32,1,0,0,0,89,90,5,84,0,0,90,91,5,114,0,0,91,92,5,117,0,0,92,99,
        5,101,0,0,93,94,5,70,0,0,94,95,5,97,0,0,95,96,5,108,0,0,96,97,5,
        115,0,0,97,99,5,101,0,0,98,89,1,0,0,0,98,93,1,0,0,0,99,34,1,0,0,
        0,100,103,3,21,10,0,101,103,3,23,11,0,102,100,1,0,0,0,102,101,1,
        0,0,0,103,36,1,0,0,0,104,110,5,34,0,0,105,109,3,35,17,0,106,109,
        3,29,14,0,107,109,3,41,20,0,108,105,1,0,0,0,108,106,1,0,0,0,108,
        107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,
        113,1,0,0,0,112,110,1,0,0,0,113,125,5,34,0,0,114,120,5,39,0,0,115,
        119,3,35,17,0,116,119,3,29,14,0,117,119,3,41,20,0,118,115,1,0,0,
        0,118,116,1,0,0,0,118,117,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,
        0,120,121,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,125,5,39,0,
        0,124,104,1,0,0,0,124,114,1,0,0,0,125,38,1,0,0,0,126,131,3,35,17,
        0,127,130,3,35,17,0,128,130,3,29,14,0,129,127,1,0,0,0,129,128,1,
        0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,40,1,0,
        0,0,133,131,1,0,0,0,134,136,7,3,0,0,135,134,1,0,0,0,136,137,1,0,
        0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,42,1,0,0,0,139,141,7,4,0,
        0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,
        0,143,44,1,0,0,0,14,0,78,83,98,102,108,110,118,120,124,129,131,137,
        142,0
    ]

class PythonProjectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    NUMBER = 11
    DECIMAL = 12
    BOOL = 13
    LETTER = 14
    STRING = 15
    VARNAME = 16
    WS = 17
    NEWLINE = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'-='", "'*='", 
            "'/='" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "DECIMAL", "BOOL", "LETTER", "STRING", "VARNAME", 
            "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "LOWER", "UPPER", "DIGIT", "NEGATIVE", 
                  "NUMBER", "DECIMAL", "BOOL", "LETTER", "STRING", "VARNAME", 
                  "WS", "NEWLINE" ]

    grammarFileName = "PythonProject.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


