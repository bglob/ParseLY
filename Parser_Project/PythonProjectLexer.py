# Generated from PythonProject.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,260,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,3,29,167,8,29,1,29,4,29,170,8,29,11,29,12,29,
        171,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,187,8,31,1,32,1,32,1,33,1,33,4,33,193,8,33,11,33,12,33,
        194,1,34,1,34,1,34,4,34,200,8,34,11,34,12,34,201,1,35,1,35,5,35,
        206,8,35,10,35,12,35,209,9,35,1,35,1,35,1,35,5,35,214,8,35,10,35,
        12,35,217,9,35,1,35,3,35,220,8,35,1,36,1,36,1,36,1,36,1,37,1,37,
        1,37,1,37,1,37,4,37,231,8,37,11,37,12,37,232,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,5,40,246,8,40,10,40,12,40,249,
        9,40,1,41,4,41,252,8,41,11,41,12,41,253,1,42,4,42,257,8,42,11,42,
        12,42,258,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,0,51,0,53,0,55,0,57,0,59,25,61,26,63,27,65,28,
        67,29,69,30,71,31,73,32,75,33,77,34,79,35,81,36,83,37,85,38,1,0,
        7,1,0,97,122,1,0,65,90,1,0,48,57,4,0,33,47,58,64,91,96,123,126,1,
        0,9,9,1,0,32,32,2,0,10,10,13,13,271,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,1,87,1,0,0,0,3,89,1,0,0,0,5,91,1,0,0,0,7,93,1,0,0,0,9,95,1,
        0,0,0,11,97,1,0,0,0,13,99,1,0,0,0,15,102,1,0,0,0,17,105,1,0,0,0,
        19,108,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,119,1,0,0,0,27,123,
        1,0,0,0,29,126,1,0,0,0,31,128,1,0,0,0,33,131,1,0,0,0,35,133,1,0,
        0,0,37,136,1,0,0,0,39,139,1,0,0,0,41,142,1,0,0,0,43,146,1,0,0,0,
        45,149,1,0,0,0,47,151,1,0,0,0,49,155,1,0,0,0,51,157,1,0,0,0,53,159,
        1,0,0,0,55,161,1,0,0,0,57,163,1,0,0,0,59,166,1,0,0,0,61,173,1,0,
        0,0,63,186,1,0,0,0,65,188,1,0,0,0,67,192,1,0,0,0,69,199,1,0,0,0,
        71,219,1,0,0,0,73,221,1,0,0,0,75,230,1,0,0,0,77,234,1,0,0,0,79,237,
        1,0,0,0,81,242,1,0,0,0,83,251,1,0,0,0,85,256,1,0,0,0,87,88,5,43,
        0,0,88,2,1,0,0,0,89,90,5,45,0,0,90,4,1,0,0,0,91,92,5,42,0,0,92,6,
        1,0,0,0,93,94,5,47,0,0,94,8,1,0,0,0,95,96,5,37,0,0,96,10,1,0,0,0,
        97,98,5,61,0,0,98,12,1,0,0,0,99,100,5,43,0,0,100,101,5,61,0,0,101,
        14,1,0,0,0,102,103,5,45,0,0,103,104,5,61,0,0,104,16,1,0,0,0,105,
        106,5,42,0,0,106,107,5,61,0,0,107,18,1,0,0,0,108,109,5,47,0,0,109,
        110,5,61,0,0,110,20,1,0,0,0,111,112,5,58,0,0,112,22,1,0,0,0,113,
        114,5,119,0,0,114,115,5,104,0,0,115,116,5,105,0,0,116,117,5,108,
        0,0,117,118,5,101,0,0,118,24,1,0,0,0,119,120,5,102,0,0,120,121,5,
        111,0,0,121,122,5,114,0,0,122,26,1,0,0,0,123,124,5,105,0,0,124,125,
        5,110,0,0,125,28,1,0,0,0,126,127,5,60,0,0,127,30,1,0,0,0,128,129,
        5,60,0,0,129,130,5,61,0,0,130,32,1,0,0,0,131,132,5,62,0,0,132,34,
        1,0,0,0,133,134,5,62,0,0,134,135,5,61,0,0,135,36,1,0,0,0,136,137,
        5,61,0,0,137,138,5,61,0,0,138,38,1,0,0,0,139,140,5,33,0,0,140,141,
        5,61,0,0,141,40,1,0,0,0,142,143,5,97,0,0,143,144,5,110,0,0,144,145,
        5,100,0,0,145,42,1,0,0,0,146,147,5,111,0,0,147,148,5,114,0,0,148,
        44,1,0,0,0,149,150,5,35,0,0,150,46,1,0,0,0,151,152,5,34,0,0,152,
        153,5,34,0,0,153,154,5,34,0,0,154,48,1,0,0,0,155,156,7,0,0,0,156,
        50,1,0,0,0,157,158,7,1,0,0,158,52,1,0,0,0,159,160,7,2,0,0,160,54,
        1,0,0,0,161,162,5,45,0,0,162,56,1,0,0,0,163,164,7,3,0,0,164,58,1,
        0,0,0,165,167,3,55,27,0,166,165,1,0,0,0,166,167,1,0,0,0,167,169,
        1,0,0,0,168,170,3,53,26,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,
        1,0,0,0,171,172,1,0,0,0,172,60,1,0,0,0,173,174,3,59,29,0,174,175,
        5,46,0,0,175,176,3,59,29,0,176,62,1,0,0,0,177,178,5,84,0,0,178,179,
        5,114,0,0,179,180,5,117,0,0,180,187,5,101,0,0,181,182,5,70,0,0,182,
        183,5,97,0,0,183,184,5,108,0,0,184,185,5,115,0,0,185,187,5,101,0,
        0,186,177,1,0,0,0,186,181,1,0,0,0,187,64,1,0,0,0,188,189,3,57,28,
        0,189,66,1,0,0,0,190,193,3,49,24,0,191,193,3,51,25,0,192,190,1,0,
        0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,
        0,0,195,68,1,0,0,0,196,200,3,67,33,0,197,200,3,59,29,0,198,200,3,
        83,41,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,201,
        1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,70,1,0,0,0,203,207,5,
        34,0,0,204,206,3,69,34,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,
        1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,220,
        5,34,0,0,211,215,5,39,0,0,212,214,3,69,34,0,213,212,1,0,0,0,214,
        217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,
        215,1,0,0,0,218,220,5,39,0,0,219,203,1,0,0,0,219,211,1,0,0,0,220,
        72,1,0,0,0,221,222,5,110,0,0,222,223,5,111,0,0,223,224,5,116,0,0,
        224,74,1,0,0,0,225,231,7,4,0,0,226,227,5,32,0,0,227,228,5,32,0,0,
        228,229,5,32,0,0,229,231,5,32,0,0,230,225,1,0,0,0,230,226,1,0,0,
        0,231,232,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,76,1,0,0,0,
        234,235,5,105,0,0,235,236,5,102,0,0,236,78,1,0,0,0,237,238,5,101,
        0,0,238,239,5,108,0,0,239,240,5,115,0,0,240,241,5,101,0,0,241,80,
        1,0,0,0,242,247,3,67,33,0,243,246,3,67,33,0,244,246,3,59,29,0,245,
        243,1,0,0,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,
        248,1,0,0,0,248,82,1,0,0,0,249,247,1,0,0,0,250,252,7,5,0,0,251,250,
        1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,84,1,
        0,0,0,255,257,7,6,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,256,1,
        0,0,0,258,259,1,0,0,0,259,86,1,0,0,0,17,0,166,171,186,192,194,199,
        201,207,215,219,230,232,245,247,253,258,0
    ]

class PythonProjectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    NUMBER = 25
    DECIMAL = 26
    BOOL = 27
    SPECIAL = 28
    LETTER = 29
    SENTENCE = 30
    STRING = 31
    NOT = 32
    TAB = 33
    IF = 34
    ELSE = 35
    VARNAME = 36
    WS = 37
    NEWLINE = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'-='", "'*='", 
            "'/='", "':'", "'while'", "'for'", "'in'", "'<'", "'<='", "'>'", 
            "'>='", "'=='", "'!='", "'and'", "'or'", "'#'", "'\"\"\"'", 
            "'not'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "DECIMAL", "BOOL", "SPECIAL", "LETTER", "SENTENCE", 
            "STRING", "NOT", "TAB", "IF", "ELSE", "VARNAME", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "LOWER", "UPPER", 
                  "DIGIT", "NEGATIVE", "SPECIALCHAR", "NUMBER", "DECIMAL", 
                  "BOOL", "SPECIAL", "LETTER", "SENTENCE", "STRING", "NOT", 
                  "TAB", "IF", "ELSE", "VARNAME", "WS", "NEWLINE" ]

    grammarFileName = "PythonProject.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


