# Generated from .\PythonProject.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
        9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,
        1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,3,25,140,8,25,1,25,4,25,143,8,25,11,25,12,25,144,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        3,27,160,8,27,1,28,1,28,4,28,164,8,28,11,28,12,28,165,1,29,1,29,
        1,29,1,29,5,29,172,8,29,10,29,12,29,175,9,29,1,29,1,29,1,29,1,29,
        1,29,5,29,182,8,29,10,29,12,29,185,9,29,1,29,3,29,188,8,29,1,30,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,4,31,199,8,31,11,31,12,31,
        200,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,5,34,
        214,8,34,10,34,12,34,217,9,34,1,35,4,35,220,8,35,11,35,12,35,221,
        1,36,4,36,225,8,36,11,36,12,36,226,0,0,37,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,0,45,0,47,0,49,0,51,22,53,23,55,24,57,
        25,59,26,61,27,63,28,65,29,67,30,69,31,71,32,73,33,1,0,6,1,0,97,
        122,1,0,65,90,1,0,48,57,1,0,9,9,1,0,32,32,2,0,10,10,13,13,241,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,
        0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,90,
        1,0,0,0,17,93,1,0,0,0,19,96,1,0,0,0,21,99,1,0,0,0,23,101,1,0,0,0,
        25,103,1,0,0,0,27,106,1,0,0,0,29,108,1,0,0,0,31,111,1,0,0,0,33,114,
        1,0,0,0,35,117,1,0,0,0,37,121,1,0,0,0,39,124,1,0,0,0,41,126,1,0,
        0,0,43,130,1,0,0,0,45,132,1,0,0,0,47,134,1,0,0,0,49,136,1,0,0,0,
        51,139,1,0,0,0,53,146,1,0,0,0,55,159,1,0,0,0,57,163,1,0,0,0,59,187,
        1,0,0,0,61,189,1,0,0,0,63,198,1,0,0,0,65,202,1,0,0,0,67,205,1,0,
        0,0,69,210,1,0,0,0,71,219,1,0,0,0,73,224,1,0,0,0,75,76,5,43,0,0,
        76,2,1,0,0,0,77,78,5,45,0,0,78,4,1,0,0,0,79,80,5,42,0,0,80,6,1,0,
        0,0,81,82,5,47,0,0,82,8,1,0,0,0,83,84,5,37,0,0,84,10,1,0,0,0,85,
        86,5,61,0,0,86,12,1,0,0,0,87,88,5,43,0,0,88,89,5,61,0,0,89,14,1,
        0,0,0,90,91,5,45,0,0,91,92,5,61,0,0,92,16,1,0,0,0,93,94,5,42,0,0,
        94,95,5,61,0,0,95,18,1,0,0,0,96,97,5,47,0,0,97,98,5,61,0,0,98,20,
        1,0,0,0,99,100,5,58,0,0,100,22,1,0,0,0,101,102,5,60,0,0,102,24,1,
        0,0,0,103,104,5,60,0,0,104,105,5,61,0,0,105,26,1,0,0,0,106,107,5,
        62,0,0,107,28,1,0,0,0,108,109,5,62,0,0,109,110,5,61,0,0,110,30,1,
        0,0,0,111,112,5,61,0,0,112,113,5,61,0,0,113,32,1,0,0,0,114,115,5,
        33,0,0,115,116,5,61,0,0,116,34,1,0,0,0,117,118,5,97,0,0,118,119,
        5,110,0,0,119,120,5,100,0,0,120,36,1,0,0,0,121,122,5,111,0,0,122,
        123,5,114,0,0,123,38,1,0,0,0,124,125,5,35,0,0,125,40,1,0,0,0,126,
        127,5,34,0,0,127,128,5,34,0,0,128,129,5,34,0,0,129,42,1,0,0,0,130,
        131,7,0,0,0,131,44,1,0,0,0,132,133,7,1,0,0,133,46,1,0,0,0,134,135,
        7,2,0,0,135,48,1,0,0,0,136,137,5,45,0,0,137,50,1,0,0,0,138,140,3,
        49,24,0,139,138,1,0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,143,
        3,47,23,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,
        1,0,0,0,145,52,1,0,0,0,146,147,3,51,25,0,147,148,5,46,0,0,148,149,
        3,51,25,0,149,54,1,0,0,0,150,151,5,84,0,0,151,152,5,114,0,0,152,
        153,5,117,0,0,153,160,5,101,0,0,154,155,5,70,0,0,155,156,5,97,0,
        0,156,157,5,108,0,0,157,158,5,115,0,0,158,160,5,101,0,0,159,150,
        1,0,0,0,159,154,1,0,0,0,160,56,1,0,0,0,161,164,3,43,21,0,162,164,
        3,45,22,0,163,161,1,0,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,
        1,0,0,0,165,166,1,0,0,0,166,58,1,0,0,0,167,173,5,34,0,0,168,172,
        3,57,28,0,169,172,3,51,25,0,170,172,3,71,35,0,171,168,1,0,0,0,171,
        169,1,0,0,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,
        174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,176,188,5,34,0,0,177,
        183,5,39,0,0,178,182,3,57,28,0,179,182,3,51,25,0,180,182,3,71,35,
        0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,185,1,0,0,
        0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,
        0,186,188,5,39,0,0,187,167,1,0,0,0,187,177,1,0,0,0,188,60,1,0,0,
        0,189,190,5,110,0,0,190,191,5,111,0,0,191,192,5,116,0,0,192,62,1,
        0,0,0,193,199,7,3,0,0,194,195,5,32,0,0,195,196,5,32,0,0,196,197,
        5,32,0,0,197,199,5,32,0,0,198,193,1,0,0,0,198,194,1,0,0,0,199,200,
        1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,64,1,0,0,0,202,203,5,
        105,0,0,203,204,5,102,0,0,204,66,1,0,0,0,205,206,5,101,0,0,206,207,
        5,108,0,0,207,208,5,115,0,0,208,209,5,101,0,0,209,68,1,0,0,0,210,
        215,3,57,28,0,211,214,3,57,28,0,212,214,3,51,25,0,213,211,1,0,0,
        0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,
        0,216,70,1,0,0,0,217,215,1,0,0,0,218,220,7,4,0,0,219,218,1,0,0,0,
        220,221,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,72,1,0,0,0,223,
        225,7,5,0,0,224,223,1,0,0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,
        227,1,0,0,0,227,74,1,0,0,0,17,0,139,144,159,163,165,171,173,181,
        183,187,198,200,213,215,221,226,0
    ]

class PythonProjectLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    NUMBER = 22
    DECIMAL = 23
    BOOL = 24
    LETTER = 25
    STRING = 26
    NOT = 27
    TAB = 28
    IF = 29
    ELSE = 30
    VARNAME = 31
    WS = 32
    NEWLINE = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'-='", "'*='", 
            "'/='", "':'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
            "'and'", "'or'", "'#'", "'\"\"\"'", "'not'", "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "DECIMAL", "BOOL", "LETTER", "STRING", "NOT", "TAB", 
            "IF", "ELSE", "VARNAME", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "LOWER", "UPPER", "DIGIT", "NEGATIVE", "NUMBER", 
                  "DECIMAL", "BOOL", "LETTER", "STRING", "NOT", "TAB", "IF", 
                  "ELSE", "VARNAME", "WS", "NEWLINE" ]

    grammarFileName = "PythonProject.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


